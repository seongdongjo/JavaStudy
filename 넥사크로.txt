#) 개발 플랫폼 변화
메인프레임 -> 데스크탑 -> cs(client/server)는 점점 쇠퇘한다. cs는 반드시 하나의 화면을 개발하면 클라이언트들에게 배포해서 설치해야한다.
그래서 클라이언트가 많아지면 힘들다 -> 웹사이트(웹브라우저한계) -> RIA(개발자가 was에 올리기만하면 전용브라우저를 통해 볼수있다) 하지만 전용브라우저의 문제점이 있다
크롬같은곳에 보고싶어서 나온게 자바스크립트기반인 넥사크로가 나온것이다.

넥사크로로 만든 소스 form.xfdl -> generate -> form.js로 변환 -> 배포(웹브라우저,웹뷰로 확인)

form버튼을 만들면 어떻게 html구조로 만들어진걸까?? -> Work폴더위에 nexacro14lib가 있는데 거기에 button.js가 있다.

****xadl(원본)에서 js로 변환 가능하지만 js -> xadl로 변환못한다. 그래서 관리는 xadl쪽에서 해야한다.
원본폴더에는 Work, default_type.def, np0219.xadl 등이있고 build하는 순간 내가 지정한 위치에 nexacro14lib, Work, js들이 만들어진다.


this.Button00_onclick = function(obj:Button, e:nexacro.ClickEventInfo)
{
	//scope -> 폼을지정
	this.alert("Hello");
	application.trace("Hello"); //브라우저에는 개발자도구 console에서 확인가능, 그냥 Runntime에는 아래 console에서 확인가능
}

========================================================================
typedefinition을 더블클릭하면 modules에 compcom.json -> 아래 showjson을 보면 여러 js들이 있는데 이거를 쓸수있다.(사진참조)

만약에 원본소스에서 work폴더를 복사해서 복사본을 work2로 만들었는데 넥사크로에서 프로젝트보면 refresh해도 work2라는 프로젝트가 안생긴다. -> typedefinition에 더블클릭해서 만들어야한다. work2, ./Work2/ 이렇게

this.Button00_onclick = function(obj:Button, e:nexacro.ClickEventInfo)
{
	//scope -> 폼을지정
	this.alert("Hello");
	trace("Hello");
}

//변수확인하기
this.Button01_onclick = function(obj:Button, e:nexacro.ClickEventInfo)
{
	//변수 get
	trace(application.gv_id);
	//변수 set
	application.gv_id = "test"
}

===========================================================================
// 주민번호(앞)
this.div_area1_edt_pid1_onchanged = function(obj:Edit, e:nexacro.ChangeEventInfo)
{
	var jumin_f = obj.value; 
	var jumin_b = this.fn_NullToEmpty(this.div_area1.edt_pid2.value); //이거는 lib - common에 있음
	
	if(jumin_f != "" && jumin_b != "") {
		// 주민번호 정합성 체크
		this.fn_jumin_chk(jumin_f + jumin_b);
	}
}

// 주민번호(뒤)
this.div_area1_edt_pid2_onchanged = function(obj:Edit, e:nexacro.ChangeEventInfo)
{
	var jumin_f = this.fn_NullToEmpty(this.div_area1.edt_pid1.value);
	var jumin_b = obj.value; 
	this.div_area1.edt_pid2.set_tooltiptext(jumin_b);
	if(jumin_f != "" && jumin_b != "") {		
		// 주민번호 정합성 체크
		this.fn_jumin_chk(jumin_f + jumin_b);
	}
}


// (조회조건)주민번호 정합성 체크
this.fn_jumin_chk = function(juminNo){	
	var rtn = this.fn_CheckJumin(juminNo);	//이거는 lib - common에 있음
	if(rtn == -1){
		this.alert("주민번호 형식이 올바르지않습니다.");
		this.div_area1.edt_pid1.set_value("");
		this.div_area1.edt_pid2.set_value("");
		this.div_area1.edt_pid2.set_tooltiptext("");
		this.div_area1.edt_pid1.setFocus();
		return false;
	}
	return true;
}
======================================================================================
//학교코드 조회 
ds_main = sch_cd, sch_nm, office_id, user_id

// 조회
this.fn_search = function (){

	var strSchName = this.div_search.edt_name_r.value;       // 학교명
    	
	var svcId = "search";
	var url = "/std/schoolCode/selectSchoolCode.do";
	var inDatasets = "";
	var outDatasets = "ds_main=ds_schoolCode";
	var argument = "";
	
	//처음에는 학교명이 null로 조회가 되니까
	// Null이 아닌경우에 파라미터로 셋팅
	if(strSchName != null && strSchName != ""){ argument += "strSchName="+nexacro.wrapQuote(strSchName); }
	
	// 콜백함수명
	var callbackFunc = "fn_callback"; 
	
	ComFn.transaction(this, svcId, url, inDatasets, outDatasets, argument, callbackFunc);
}

---------------------
/**
	 * 학교코드 조회
	 * @param NexacroMapDTO xpDto
	 * @param Model model
	 */
	@RequestMapping("/std/schoolCode/selectSchoolCode.do")
	public ModelAndView selectSchoolCode(NexacroMapDTO xpDto, Model model) {
		ModelAndView mav = new ModelAndView("nexacroMapView");

		try {
			long startTime = System.currentTimeMillis();
		
			Map <String, Object> inVar 	       = xpDto.getInVariableMap();
			Map <String, DataSetVO> outDataset = xpDto.getOutDataSetVO();
			Map <String, Object> outVariableList = xpDto.getOutVariableMap();
			
			List<schoolCodeDTO> schoolCode = schoolCodeService.selectSchoolCode(inVar);
			
			DataSetVO schoolCodeVO = new DataSetVO();
			schoolCodeVO.setRowVOs(schoolCode);
			outDataset.put("ds_schoolCode", schoolCodeVO); 
			long endTime = System.currentTimeMillis();
			String executionTime = String.format("%.3f", (double)(endTime - startTime)*0.001);
			outVariableList.put(NexacroConstant.EXECUTION_TIME, executionTime);
			
			mav.addObject(NexacroConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
			mav.addObject(NexacroConstant.OUT_DATASET_ATT_NAME, xpDto.getOutDataSetVO());
			mav.addObject(NexacroConstant.ERROR_CODE, "0");
			mav.addObject(NexacroConstant.ERROR_MSG, "");
			
		}catch( NexaServiceException e ){
			// 메세지 처리는 에러코드에 따라 달라질수 있음.
			mav.addObject(NexacroConstant.ERROR_CODE, "-1");
			mav.addObject(NexacroConstant.ERROR_MSG, "failMessage");
			throw e;
		}
		
		return mav;
	}

--------------------------------
/**
	 * 학교코드 조회
	 * @param schoolCodeDTO searchVO
	 * @return List<schoolCodeDTO>
	 * @throws NexaServiceException
	 */
	public List<schoolCodeDTO> selectSchoolCode(Map <String, Object> inVar) throws NexaDaoException {
		
		Map<String, Object> paraMap = new HashMap<String, Object>();
		
		// 파라메터 - 조회 조건 
      	String strSchName 	= (String)inVar.get("strSchName"); 	// 학교명 
      	paraMap.put("strSchName",strSchName);
  		
		return schoolCodeDAO.selectSchoolCode(paraMap);
	}
-----------------------------
	/**
	 * 학교코드 조회
	 * @param Map searchVO
	 * @return schoolCodeDTO
	 * @throws NexaServiceException
	 */
	public List<schoolCodeDTO> selectSchoolCode(Map<String,Object> searchVO) throws NexaDaoException {
		return selectList("schoolCode.selectSchoolCode",searchVO);
	}
-----------------------------
<!-- 학교코드 조회 -->
	<select id="selectSchoolCode" parameterType="map" resultType="schoolCodeDTO">                                                                                                           
	<![CDATA[
		SELECT SCH_CD,
		       TRIM(SCH_NM) AS SCH_NM
		  FROM S_SCH_CD
         WHERE 1 = 1
    ]]>
	   	<!-- 차량명 -->
	   	<if test='strSchName != null and strSchName != ""'>
           AND SCH_NM like '%'||#{strSchName}||'%'
        </if>
      ORDER BY SCH_CD
	</select>
=================================================================
//넥사크로 input규칙
졸업연도 edt_gra_year_r (그냥 input type text)
주민번호앞 edt_pid1_r
주민번호뒤 edt_pid2_r
이름 edt_name_r
승/하선 cmb_dvn_r
면허구분 cmb_license_r (selectbox)
계열 cmb_sch_level
학교명 cmb_sch_school

================================================================
원래 DB는 컬럼이 스네이크방식인데 DTO는 카멜케이스로 우리가 선언을 했다. 어떻게 그러면 자동매핑이 될까??
-> sqlmap - mybatis-config.xml 설정파일

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<settings>
        <setting name="jdbcTypeForNull" value="VARCHAR"/>
        <setting name="mapUnderscoreToCamelCase" value="true"/>   //이부분이 자동변환설정이다.
    </settings>
    
    <typeAliases>
    	<typeAlias alias="hmap"    type="java.util.HashMap"/>
    	<typeAlias alias="egovMap" type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
    	<typeAlias alias="Integer" type="java.lang.Integer"/>
    	<typeAlias alias="long"    type="java.lang.Long"/>
    	<typeAlias alias="float"   type="java.lang.Float"/>
    	<typeAlias alias="double"  type="java.lang.Double"/>
    	<typeAlias alias="String"  type="java.lang.String"/>
    	<typeAlias alias="map" 	   type="java.util.Map"/>
    	
    	<!-- common -->
    	<package name="koswec.app.com.common.vo" />
==========================================================================
//svcId
this.fn_callback = function(svcId, errorCode, errorMsg){
	if(errorCode != 0){
		// TODO : 공통메세지 처리
		//alert(errorMsg);
		ComFn.alert(this, "000022", "|");
	}else{
		// 리턴파라미터 svcId는 트랜잭션의 svcId 파라미터 값과 동일
		if(svcId == "save"){
			alert("저장되었습니다.");
			this.fn_search();
		
		} else if(svcId == "school"){ 
			this.ds_sch_r.copyData(this.ds_sch);
			this.ds_sch_r.insertRow(0);
			this.ds_sch_r.setColumn(0,"SCH_CD","");
			this.ds_sch_r.setColumn(0,"SCH_NM","전체");
			this.ds_sch_r.setColumn(0,"SCH_CDNM","전체");
			this.div_search.cmb_sch_school.set_index(0);
		
		}else if(svcId == "search"){
			trace(this.ds_main.saveXML());
		}
		
		ComFn.alert(this, "000175", this.fv_curDs.rowcount+"|");
	}	
}
==================================================================================
//결과: 970103-1****** (PID)
SELECT SUBSTR(DAMO.API_DEC(PID),1,6)||'-'|| SUBSTR(DAMO.API_DEC(PID),7,1)||'******' AS PID,
                    SUBSTR(DAMO.API_DEC(PID),1,6) AS PID1,
                    SUBSTR(DAMO.API_DEC(PID),7,7) AS PID2,
                    GRADU_DAT,
                    NM,
                    SCH_CD,
                    SUB_CD,
                    F_SCH_NM(SCH_CD) AS SCH_NM,
                    F_SUB_NM(SUB_CD) AS SUB_NM,
                    ZIPCD, 
==============================================================================
// 조회전 
this.fn_bfrSearch = function(){
	//TODO : 조회전 로직 있다면 추가.

	var jumin_f = this.fn_NullToEmpty(
	);
	var jumin_b = this.fn_NullToEmpty(this.div_area1.edt_pid2.value);

	// 주민번호 필수입력 체크
	if(jumin_f == "") {
		this.alert("주민번호(앞)은 필수입력입니다.");
		this.div_area1.edt_pid1.setFocus();
		return;
	}
	if(jumin_b == "") {
		this.alert("주민번호(뒤)는 필수입력입니다.");
		this.div_area1.edt_pid2.setFocus();
		return;
	}
	
	// 주민번호 정합성 체크
	if(this.fn_jumin_chk(jumin_f + jumin_b)) {
		this.fn_search(jumin_f + jumin_b);
	}	
}

// (조회조건)주민번호 정합성 체크
this.fn_jumin_chk = function(juminNo){	
	var rtn = this.fn_CheckJumin(juminNo);	
	if(rtn == -1){
		this.alert("주민번호 형식이 올바르지않습니다.");
		this.div_area1.edt_pid1.set_value("");
		this.div_area1.edt_pid2.set_value("");
		this.div_area1.edt_pid2.set_tooltiptext("");
		this.div_area1.edt_pid1.setFocus();
		return false;
	}
	return true;
}

//주민번호 유효성 체크 공식
//주민번호 각 자리수 * 2,3,4,5,6,7,8,9,2,3,4
this.fn_CheckJumin = function(jumin_no) {

	var tmp1, tmp2, tmp3;
	var t1, t2, t3, t4, t5, t6, t7;
	
	tmp1 = jumin_no.substr(2,2); //01
	tmp2 = jumin_no.substr(4,2); //03
    tmp3 = jumin_no.substr(6,1); // 1
       
	if(jumin_no.length != 13) return -1;

	if((tmp1 < "01") || (tmp1 > "12")) return -1;
	if((tmp2 < "01") || (tmp2 > "31")) return -1;
	if((tmp3 < "1" ) || (tmp3 > "4" )) return -1;
	
	F1 = jumin_no.substr(0, 1); //9
	F2 = jumin_no.substr(1, 1); //7
	F3 = jumin_no.substr(2, 1); //0
	F4 = jumin_no.substr(3, 1); //1
	F5 = jumin_no.substr(4, 1); //0
	F6 = jumin_no.substr(5, 1); //3
	B1 = jumin_no.substr(6, 1); //1
	B2 = jumin_no.substr(7, 1); //1
	B3 = jumin_no.substr(8, 1); //0
	B4 = jumin_no.substr(9, 1); //...
	B5 = jumin_no.substr(10,1); //...
	B6 = jumin_no.substr(11,1); //...
	B7 = jumin_no.substr(12,1); //...
	
	// 가중치 2 3 4 5 6 7 8 9 2 3 4 5
	var tot = nexacro.toNumber(F1) * 2 + nexacro.toNumber(F2) * 3 + nexacro.toNumber(F3) * 4 + nexacro.toNumber(F4) * 5 + 
	          nexacro.toNumber(F5) * 6 + nexacro.toNumber(F6) * 7;
	   tot += nexacro.toNumber(B1) * 8 + nexacro.toNumber(B2) * 9 + nexacro.toNumber(B3) * 2 + nexacro.toNumber(B4) * 3 + 
	          nexacro.toNumber(B5) * 4 + nexacro.toNumber(B6) * 5;
		
	// 결과를 11로 나눈 나머지
	var result = nexacro.toNumber(tot) % 11;
	// (11 - 나머지)를 10으로 나눈 나머지
	result = (11 - nexacro.toNumber(result)) % 10;

	// 주민번호 유효성에 걸리므로 예외처리
	// 2022.06.15 추가, 2022.10.11 추가
	if (jumin_no == '5001181574618' || jumin_no == '5711111105310') { 
		return 0;
	} else if (result == B7) {
		return 0;
	} else {
		return -1;
	}
}

========================================================================
//입력버튼을 처음 누를때 아래 행이 하나 추가되는데 만약에 추가된상태에서 한번더 누르게되면 필수입력값을 체크받게된다.
// 추가(입력) 버튼
this.fn_addRowBtn = function (){ //입력버튼을 누르면 제일먼저 실행이된다.
	
	if(this.ds_main.rowcount > 0){ //행이 하나이상있다면
		if(! this.fn_prevValidationCheck()){ //필수값체크
			return;
		}
	}
	
	this.fn_addRowInit();
}
-----------------------------------------
// 입력
this.fn_addRowInit = function(){
	alert("fn_addRowInit");
	if(this.ds_main.getRowCount() > 0){
		if(! this.fn_prevValidationCheck()){
			return;
		}
	}
	
	var row = this.ds_main.addRow();
	
	this.ds_main.setColumn(row,"OFFICE_ID", this.fn_getSession("MI_DCCODE")); //KA01 (누가 정보를 입력했는지 알기위해)
	this.ds_main.setColumn(row,"USER_ID", this.fn_getSession("MI_ID"));	      //admin
	
	//ds-main DataSet 세팅 -> 알아서 바인딩되서 입력칸에 각각 맞게 뜸
	this.ds_main.setColumn(row,"LCLIMITATION", "1");   // 면허한정  
	this.ds_main.setColumn(row,"LCREISSUE_SAU", "5");  // 교부사유
	this.ds_main.setColumn(row,"LCISSUE_KIND", "1");   // 교부구분
	this.ds_main.setColumn(row,"LCCHECK", "0");        // 유.무효
	this.ds_main.setColumn(row,"LCEXECUTION_DATE", ComFn.Util.getToday());	// 교부일
	this.ds_main.setColumn(row,"LCLICENCE_DATE", ComFn.Util.getToday());	// 교부면허일
	
	this.div_area.edt_ident_no1.setFocus();	
}
--------------------------------------
//필수값체크 함수
// 필수 입력 체크
this.fn_prevValidationCheck = function(){
	
	if(this.pfn_divInputChk(this.div_area)) return false;  //div_area(레이아웃)안에 있는 input박스들이 넘어간다. 
	
	return true;
}
---------------------------------------
this.pfn_divInputChk = function(objDiv){
	var objStc;
	
	var cnt = objDiv.components.length;
	
	for( var i=0; i<cnt; i++){ //input요소 하나하나 null값 체크
		if( (objDiv.components[i].userdata != "" && objDiv.components[i].userdata != null) && (objDiv.components[i].value == "" || objDiv.components[i].value == null)){
			
			alert(objDiv.components[i].userdata+"는(은) 필수입력사항입니다.");
			return true;
		}
	}
	return false;
}
=============================================================================
//null값을 빈값으로 반환
this.fn_NullToEmpty = function (sValue)
{
	if(sValue == null || sValue == "undefined" || sValue == undefined)
	{
		return "";
	}
	return sValue;
}
==============================================================================
// 입력
// 입력을 클릭하면 체크박스에 첫세팅해준다. -> 그러면 body에 알아서 바인딩되서 값이 들어있는 한줄이 추가된다.
this.fn_addRowInit = function(){
	if(this.ds_main.getRowCount() > 0){
		if(! this.fn_prevValidationCheck()){
			return;
		}
	}
	
	var row = this.ds_main.addRow();
	
	this.ds_main.setColumn(row,"OFFICE_ID", this.fn_getSession("MI_DCCODE"));
	this.ds_main.setColumn(row,"USER_ID", this.fn_getSession("MI_ID"));	
	
	this.ds_main.setColumn(row,"LCLIMITATION", "1");   // 면허한정
	this.ds_main.setColumn(row,"LCREISSUE_SAU", "5");  // 교부사유
	this.ds_main.setColumn(row,"LCISSUE_KIND", "1");   // 교부구분
	this.ds_main.setColumn(row,"LCCHECK", "0");        // 유.무효
	this.ds_main.setColumn(row,"LCEXECUTION_DATE", ComFn.Util.getToday());	// 교부일
	this.ds_main.setColumn(row,"LCLICENCE_DATE", ComFn.Util.getToday());	// 교부면허일
	
	this.div_area.edt_ident_no1.setFocus();	
}
==============================================================================
