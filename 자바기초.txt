-자바의 특징
1. 객체지향언어
2. 자동 메모리 관리(가비지 컬렉터 == GC) 
3. 멀티 쓰레드를 지원 (하나의 프로그램에서 동시의 여러작업) 채팅하면서 파일을 주고받을 수있는 것 등
4. 풍부한 라이브러리 지원
5. 운영체제에 독립적
특정운영체제에서만 실행가능하는게 아니다.
JVM(자바가상머신)떄문에 가능하다. -> 자바프로그램이 실행되는 가상컴퓨터
-----------               
일반 애플리케이션(window용)        
-----------
OS(window)
-----------
하드웨어
-----------
이렇게되면 다른 os로 옮길때는 또 프로그램을 수정해야한다

하지만 자바는
		     Java 애플리케이션 
        /         |        \
       /          |         \
	  /           |          \
-----------    ---------     ------------
jvm(window)    jvm(OSX용)     jvm(리눅스용)
-----------    ---------     ------------
os(window)     os(매킨토시)     os(리눅스)
-----------    ---------     ------------
하드웨어          하드웨어         하드웨어
-----------    ---------     ------------
따라서 jvm만 설치되있으면 된다.
==============================================================================
자바설치 및 제거
cmd -> java -version -> appwiz.cpl(프로그램제거) -> java 2개 제거(update, kit)

자바 설치
구글 -> jdk8 -> win64 다운 -> 설치 -> C위치에 다운 ->  jdk 먼저 다운 받고 -> jre를 다운받는다(자바코드실행하기위한)
->cmd -> java -version

환경변수 세팅
cmd -> sysdm.cpl -> 위에 고급 -> 환경변수 -> 시스템변수(전체계정이 설정되는)에서
1. JAVA_HOME
-> C->programfiles -> java -> jdk 폴더 들어가기 -> 파일탐색기 주소 복사
편집 -> %JAVA_HOME%bin 삭제 -> 새로 만들기 -> 변수이름 : JAVA_HOME , 변수값 : C:\Program Files\Java\jdk1.8.0_291
-> 확인
2. Path
시스템변수 -> Path 편집 -> %JAVA_HOME%\bin

cmd -> javac -version으로 확인

파일탐색기 주소창에 -> %JAVA_HOME%하면 설치경로로 이동된다.
------------------------------------------------------------
이클립스 설치
구글 -> eclipse -> downloadpackages -> MORE DOWNLOADS 9월부터 자바8버전이 인식xx 그래서 3월로 다운받는다
-> EE설치 

톰캣설치 -> 8버전(core.zip) -> 압축풀기 -> bin은 톰캣에 관련된 명령어 들어가있다. -> 
start.bat 더블클릭 실행 -> 서버가 돌아간다 -> localhost:8080치면 톰캣이 돌아가고 있기때문에 가능하다. 윈도우는 startup.bat이고
리눅스는 start.sh라서 실제로 systemctl start tomcat과 같다고 생각하면 된다.

시스템변수
1.Path하나더 추가 -> CATALIA_HOME ->  E:\평일7월JSP_조성동\apache-tomcat-8.5.68 (bin에는 들어가지말고)
2.Path 편집 -> 추가 %CATALINA_HOME%\bin

cmd새로 열어서 -> %CATALINA_HOME% 입력 -> 톰캣홈디렉토리 나온다. -> startup치면 서버구동된다. -> localhost:8080 검색
==============================================================================================
1. javac.exe -> 자바 컴파일러 javac hello.java -> hello.class로 변환 
2. java.exe로(클래스파일실행) hello.class 파일을 실행
============================================================================
build란 소스파일(.java)로 부터 프로그램을 만들어 내는 과정
멀티컬럼모드 -> alt + shift + a + 화살표

//자료형 (=Data Type) : 코드 내에서 데이터를 식별하는 기준
		// 1. 기본 자료형
		// boolean	1bit     참/거짓
		// byte     1byte	 정수
		// char     2byte	 문자
		// short	2byte    정수
		// int 	    4byte	 정수
		// long     8byte    정수
		// float    4byte    실수
		// double   8byte    실수
		
		// 2. 참조 자료형
		// 기본 자료형을 제외한 모두
		// 클래스로 만들어진 자료형을 의미한다.
		// 참조 자료형은 데이터를 직접 저장하지 않고, 다른 위치에 생성된 공간을 가리키는 자료형

//배열도 참조 자료형에 해당한다.
		int[] arr = new int[] {10,20,30,40,50};  //arr이 저기 있는 요소들을 가리킨다. (new가 힙에서 만들어진다)
        System.out.println("arr = "+arr); //참조변수는 출력시, 해시코드라는 이상한 값이 출력된다.
		System.out.println("arr[0]= "+arr[0]);
==============================================================================
1은 참은 맞지만 자바는 아니다. 자바는 true, false만
boolean bo1 = true;
boolean bo3 = 10 > 5;  // true
boolean bo2 = false;

//형변환은 반올림 생각하지 않는다.  .2f이런거는 가능
		//그래서, 3.141592에서
		//double result = Math.round(pi); // 3.0으로 출력(소수점위치에서 반올림)
		//double result = Math.round(pi*100) / 100.0; //3.14로 출력
================================================================================
int num = 10;
int bNum = 0B1010; //2진수
int oNum = 012;  //8진수
int xNum = 0XA; //16진수 10은 16진수로 A
//출력: 10
==================================================================================
public class ex02 {
	public static void main(String args[]) {
		//Scanner라는 데이터를 읽는 도구를 사용해서 입력을 좀 더 수월하게 처리가능(통로에서 쓱 스캔)
		//그래서 scanner는 system.in과 같이쓴다.
		
		//System : 표준 입출력 클래스
		//System안에는 in이 있고  -> 표준 입력 스트림(한글자씩 통로를 통해 전달) 그래서 한번에 주는 scanner이용
		//System안에는 out이 있고 -> 표준 출력 스트림
		//System안에는 err가 있다. -> 표준 에러출력 스트림
		//Scanner도 자료형인데 참조자료형이다(기본자료형을 제외한 모든 자료형은 참조자료형이다)
		//즉, Scanner는 직접 공간을 가지고 있지 않다. 그래서 new로 공간을 만든다.
		//import해줘야된다.
		Scanner sc;  //Scanner앞에 커서두고 ctrl+space하면 import구문 알아서 들어간다.
		sc = new Scanner(System.in);  //Scanner가 스트림을 스캔을 뜬다.(sc라는 변수가 전달)
		                              //그 후 이 스트림(통로)를 닫아줘야한다.(보안상)
		int n;
		System.out.print("정수입력: ");
		n = sc.nextInt();  //sc.next자료형();
		System.out.println("n= "+n);
		
		sc.close();  //요즘에는 안닫아도 된다.(습관들이기 닫도록)
	}
}
===============================================================================
public class ex03 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int it;
		String str;
		double db;
		
		//위의 세변수에 입력을 받도록
		System.out.print("1.정수입력: ");
		it = sc.nextInt();
		System.out.println("it = "+it+"\n");
		
		System.out.print("2.실수입력: ");
		db = sc.nextDouble();
		System.out.println("db = "+db+"\n");
		
		System.out.print("3.문자열 입력: ");
		str = sc.next();  //문자열은 그냥 next
		System.out.println("str = "+str+"\n");
		
		sc.close(); //Scanner는 중간에 닫으면 다시 열수 없기 때문에 마지막에 닫자!!
		

	}

}
=================================================================================
public class ex04 {

	public static void main(String[] args) {
		//boolean, 정수, 실수는 next자료형() 형식으로 받을 수 있다.
		//문자열과, 문자는 조금다름
		
		String test = "apple"; //인덱스가 01234 달려있다.
		System.out.println("test = "+test);
		System.out.println("test[1]="+test.charAt(1)); //p출력
		
		Scanner sc = new Scanner(System.in);
		String str;
		char ch;
		
		System.out.print("문자열 입력: ");
		str = sc.next();
		System.out.println("str = "+str);
		
		//문자입력 시
		System.out.print("문자 입력: ");
		ch = sc.next().charAt(0);  //문자는 0만쓰면된다.
		System.out.println("ch = "+ch);
		
		sc.close();

	}

}
=================================================================================
변수란? 하나의 값을 저장할 수 있는 메모리 공간(변수명이 메모리공간을 가리킴)
상수란? 한번만 값을 저장가능 한 변수(변경불가)
final int MAX = 100;
리터럴? 값자체 (100같은게 리터럴이다)
===================================================================================
public class ex06 {

	public static void main(String[] args) {
		//nextLine() : 한 줄 전체를 입력 받는 구문, 버퍼를 비우는 용도로 사용되기도 한다.
		Scanner sc = new Scanner(System.in);
		
		String lang;
		int number;
		String program;
		System.out.print("공부중인 언어: ");
		lang = sc.next(); //공백 이후 부터는 출력안된다. 
		System.out.println("lang = "+lang); //자바 입니다~ 라고 입력하면 자바만 들어간다.
		                                    //즉, 버퍼에 입니다~ 가 남아있다.
		// 그래서 lang = sc.nextLine(); 이렇게 쓴다.
		
		//nextInt(); 는 \n을 안가져온다. 
		
		System.out.print("수업회차?");
		number = sc.nextInt();
		System.out.println(number + "일차~\n");
		
		sc.nextLine();  // nextInt()에서 \n을 가져오면 안되기 때문에 버퍼지우기
		
		System.out.print("사용중인 개발 도구는?");
		program = sc.nextLine();
		
		System.out.println(program + "을 사용중");
		
		sc.close();
	}

}
================================================================================
public class Ex02 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		String lang;
		int number;
		String program;
		String base;
		System.out.print("공부중인 언어: ");
		//입력: c 언어
		//출력: lang = c
		       program = 언어(\n) ->다음 base에 \n을 넘겨주지않는다.
		//띄어쓰기를 기준->next
		lang = sc.next();
		program = sc.next();
		//base = sc.next();
		System.out.println("lang = " + lang); 
		System.out.println("program = " + program);
		//System.out.println("base = " + base);
	}

}
===================================================================================
public class quiz02 {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		String name;
		String address;
		double height;
		String phone;
		int age;
		
		System.out.print("이름을 입력: ");
		name = sc.next();
		System.out.print("나이 입력: ");
		age = sc.nextInt();
		System.out.print("신장 입력: ");
		height = sc.nextDouble();
		sc.nextLine(); // \n 을 버린다
		System.out.print("주소 입력: ");
		address = sc.nextLine();
		System.out.print("연락처: ");
		phone=sc.next();
		
		System.out.printf("이름: %s(%d)세\n", name,age);
		System.out.printf("신장: %.1fcm\n", height);
		System.out.println("주소: "+address);
		System.out.printf("연락처: %s", phone);
	}

}
=============================================================================
public class ex03 {
	public static void main(String[] args) {
		// 조건 연산자 : 조건에 따라서 값을 선택하는 연산자
		Scanner sc = new Scanner(System.in);
		int n1, n2;
		n1 = sc.nextInt();
		n2 = sc.nextInt();
		
		String result = n1 > n2 ? "n1이 큰값" : "n2가 큰값";
		System.out.println("result: "+ result);
		
	}
}
==============================================================================
문) 입력 받은 수가 3의 배수인지 판별
package operator;

import java.util.Scanner;

public class quiz01 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int input;
		
		System.out.print("자연수 입력: ");
		input = sc.nextInt();
		
		System.out.println(input % 3 == 0 ? "3의 배수입니다" : "3의 배수가 아닙니다");
		//또는 result = (input % 3 == 0) ? n + "은 3의 배수입니다" : ~
	}

}
==================================================================================
문) 두수를 입력받아 큰수를 출력
package operator;

import java.util.Scanner;

public class quiz02 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int input1, input2;
		System.out.print("두 수를 입력하세요: ");
		input1 = sc.nextInt();
		input2 = sc.nextInt();
		
		int result = input1 > input2 ? input1 : input2;
		System.out.printf("result : %d(이)가 더 크다", result );
	}
}
==============================================================================
//12345678900 같은 범위는 뒤에 L이나 l 붙여야한다.
//byte는 127부터 -128까지 근데 byte bnum = 128; 이렇게 하면 에러난다.

//long lnum = 1234;  -> 4byte가 8byte에 들어간다.

//float fnum = 3.14; 이렇게 쓰면 에러가난다.(실수형에 접미사가 없으면 3.14d 라고생각 d가 생략)
//float fnum = 3.14f; 실수는 기본적으로 double(8byte)에 저장이된다. 그래서 float에 저장할려니 에러 그래서 f붙임
//long = 100000000000L; int형의 범위를 벗어나면 L붙여야됨
//10f -> 10.0f
//1e3 -> e는 10의n제곱을의미 -> 1000.0(e는 실수형 접미사)
=================================================================================
public class ex02 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int age;
		
		System.out.print("나이 입력: ");
		age = sc.nextInt();
		
		if (age>=20) {  //if문은 피라미드구조로 해야된다. 범위가 젤 많은게 밑으로
			System.out.print("성인");
		}
		else if(age >= 17) {
			System.out.print("고등학생");
		}
		else if (age >= 14) {
			System.out.print("중학생");
		}
		else {
			System.out.print("초등학생 이하");
		}
		System.out.println("입니다~");
		sc.close();    
	}

}
==============================================================================
public class ex03 {

	public static void main(String[] args) {
		//중첩 조건문 : 조건문 안에 조건문
		//상세한 조건을 검사하기 위한 구문
		
		Scanner sc = new Scanner(System.in);
		int n;
		
		System.out.print("정수 입력: ");
		n = sc.nextInt();
		
		if(n % 2 == 0) {
			System.out.println(n+"은 짝수");
			if (n % 3 == 0) {
				System.out.println(n+"은 짝수이며 3의 배수");
			}
		}
		else {
			System.out.println(n+"은 홀수");
		}
	}
}
=============================================================================
문)세 정수 최대값
public class quiz05 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int num1,num2,num3;
		int max;
		System.out.print("세 정수를 입력: ");
		num1 = sc.nextInt();
		num2 = sc.nextInt();
		num3 = sc.nextInt();
		
		max = num1;
		if(max < num2) {
			max = num2;
		}
		if(max <num3) {
			max = num3;
		}
		System.out.println("최대값: "+max);
	}
}
=============================================================================
문)
#) 자바는 강제 형변환 없이 double -> int 대입 불가능
#) 복합 대입 연산자는 알아서 처리해 준다는 특징이 있다.
package controlset;

import java.util.Scanner;

public class quiz06 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int usb;
		int gab;
		int total;
		System.out.print("usb 구매 갯수: ");
		usb = sc.nextInt();
		gab = usb * 5000;
		
		if (usb >= 100) {
			total = gab *= 0.88;  // gab * 0.88 은 안된다.자료형때문에 그래서 복합대입쓴다.
			System.out.printf("가격: %.0f원",total);
		}
		else if (usb >= 10) {
			total = (int)(gab*0.9);
			System.out.printf("가격: %.0f원",total);
		}
		else if (usb > 0) {
			System.out.println("가격: "+gab+"원");
		}
		else {
			System.out.println("잘못입력하셨습니다");
		}

	}
=============================================================================
public class quiz07 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int station;
		int total;
		
		System.out.print("정거장 수?");
		station=sc.nextInt();
		
		if(station < 10) {
			total = station * 2; //2분씩
			System.out.println("총 소요시간: "+total+"분");
		}
		else {
			total = station * 4; //4분씩
			if (total >=60) {
				int hour=total/60;
				int min=total % 60;
				System.out.println("총 소요시간: " +hour + "시간"+min+"분");
			}
			else {
				System.out.println("총 소요시간: "+total+"분");
			}
		}
		sc.close();
	}
===============================================================================
package _switch;   //switch(값) 값에 가능한 데이터는 정수와 문자열만 가능

import java.util.Scanner;

public class ex01 {
	public static void main(String[] args) {
		
		//switch 로 만들어진 것은 if로 만들수있지만 반대는 제약이있다.
		Scanner sc = new Scanner(System.in);
		int menu;
		System.out.print("메뉴 입력(1~3): ");
		menu = sc.nextInt();
		
		switch(menu) {  //break를 넣어야한다. 안넣고 1치면 1,2,3 메뉴 다 출력된다.
		case 1:
			System.out.println("1번 메뉴 선택~");
			break;
		case 2:
			System.out.println("2번 메뉴 선택");
			break;
		case 3:
			System.out.println("3번 메뉴 선택");
			break;
		}
		
	}
}
============================================================================
switch(menu) {
		case 1:
			System.out.println("1번 메뉴 선택~");  //이렇게 break가 없으면 1입력후 -> 1,2 출력 후 break만나서 그만 
		case 2:
			System.out.println("2번 메뉴 선택");
			break;
		case 3:
			System.out.println("3번 메뉴 선택");
			break;
		default:  //default는 가장 밑에 쓸꺼면 break 필요없다.
			System.out.println("없는 메뉴");
		}
==============================================================================
public class ex02 {

	public static void main(String[] args) {
		//switch 문은 특정 값 하나에 대해서 처리하는데 특화
		//즉, 범위 조건 처리가 힘들다.
		
		Scanner sc = new Scanner(System.in);
		int num;
		
		System.out.print("정수 입력(1~10): ");
		num = sc.nextInt();
		
		switch(num) {   // 5를 입력하면 5로 점프 후 break까지 
		case 1: case 3: case 5: case 7: case 9:
			System.out.println("홀수");
			break;
		case 2:
		case 4:
		case 6:
		case 8:
		case 10:
			System.out.println("짝수");
			break;
		}
	sc.close();
}
=============================================================================
public class ex03 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String menu;
		
		System.out.println("\t1. 짜장면");
		System.out.println("\t2. 짬뽕");
		System.out.println("\t3. 볶음밥");
		System.out.println("\t4. 탕수육");
		
		System.out.print("\n>>> ");
		menu = sc.next();
		
		switch(menu) {
		case "짜장면" : case "1": 
			System.out.println("짜장면 주문");
			break;
		case "짬뽕" :
			System.out.println("짬뽕 주문");
			break;
		case "볶음밥" :
			System.out.println("볶음밥 주문");
			break;
		case "탕수육" :
			System.out.println("탕수육 주문");
			break;
		default :
			System.out.println("없는 메뉴입니다");
		}
		sc.close();
	}
}
============================================================================
package loof;

public class ex01 {
	public static void main(String[] args) {
		// 1. while(조건식) 조건식이 참이면 실행
		
		int i = 1;
		while (i<=5) { // i가 5이하 일때까지 반복
			System.out.println(i+": Hello World!!!");
			i++;
		}  //반복종료 후 i는 6이다!!!!
	}
}
============================================================================
#) 0입력시 종료
package loof;

import java.util.Scanner;

public class ex02 {

	public static void main(String[] args) {
		//while의  주목적 불특정 반복
		
		Scanner sc = new Scanner(System.in);
		int n=1;
		
		while(n != 0) {
			System.out.print("정수 입력(0:종료): ");
			n = sc.nextInt();
			
			System.out.println("n = " +n+"\n");
		}
		sc.close();
	}
}
=============================================================================
package loof;

import java.util.Scanner;

public class ex04 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n2;
		
		do {  //파이썬은 do~while문이 없다.
			System.out.print("정수 입력(0입력시 종료): ");
			n2 = sc.nextInt();
			System.out.println("n2 = "+n2+"\n");
		}while(n2 != 0);
		sc.close();
	}
}
================================================================================
문) 거꾸로 수 출력
int n;
while(n!=0){ // 몫이 0이면 종료
	System.out.print(n%10);
	n /= 10;
}
=====================================
package loof;

public class ex06 {

	public static void main(String[] args) {
		//for문 : 특정횟수, 배열의 반복에 특화
		for (int i =1; i<=5; i++) {
			System.out.print(i+" ");
		} //i는 for문에서 만들어진 지역변수다. 그래서 밖에서 i출력하면 안나온다. 
	}
}
=======================================
package loof;

public class ex06 {

	public static void main(String[] args) {
		//for문 : 특정횟수, 배열의 반복에 특화
		for (int i =1; i<=5; i++) {
			System.out.print(i+" ");
		} //i는 for문에서 만들어진 지역변수다. 그래서 밖에서 i출력하면 안나온다. 
	int j = 1;
	for (j =1; j<=5; j++) {
		System.out.println(~);   
	}  //for문을 나와도 j는 6으로 사라지지 않는다.
}
=========================================
package loof;

public class ex08 {

	public static void main(String[] args) {
		//보조 제어문  : break, continue, return
		
		// 1. break : '제어문'을 즉시 탈출, 남은 아래 코드는 무시
		for(int i = 1; i<=10; i++) {
			if (i==5) {break;};
			System.out.println(i+" ");
		}
		//2. continue : '제어문'실행에서 제외해야 하는 경우에 사용
		for(int i = 1; i<=10; i++) {
			if (i==5) {continue;};
			System.out.println(i+" ");
		}
		// 3. return : '함수'를 즉시 종료, 남은 아래 코드는 무시
				for(int i = 1; i<=10; i++) {
					if (i==5) {return;};
					System.out.println(i+" ");
		}
		System.out.println("이 구간은 함수종료시 실행되지 않습니다");
	}
}
==================================================
문) 소수판별
	public static void main(String[] args) {
		boolean isprime = true;
		for(int i = 2; i<n; i++) { //1과 자기자신 빼고 나누어 졌을 때
			if (n % i == 0) {
				System.out.println("소수가 아님");
				isprime = false;
				break;
			}
		}
		if(isprime)
			System.out.println("소수다");
	}
	sc.close();
=========================================================
package loop;

import java.util.Scanner;

public class quiz01 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n, fac =1;
		System.out.print("팩토리얼: ");
		n = sc.nextInt();
		for(int i =1; i<=n; i++) {
			fac *= i;
		}
		System.out.println(n+"!="+fac);
		sc.close();
	}
}
=================================================
문) 중첩반복문 
*
**
***
****
*****
package loop2;

import java.util.Scanner;

public class ex01 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n;
		System.out.print("찍을 별의 줄 수: ");
		n = sc.nextInt();	
		for(int i =1; i<=n; i++) {
			for(int j=1; j<=i; j++) {
				System.out.print("*");
			}
			System.out.println();
		}

	}

}
====================================================
    *
   ***
  *****
 *******
*********
public class quiz01 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int num;
		System.out.print("찍을 별의 줄 수: ");
		num = sc.nextInt();
		
		for(int i=0; i<num; i++){
			for(int j = 1; j<num-i; j++) {
				System.out.print(" ");
			}
			for(int k=0; k<i*2+1; k++) {
				System.out.print("*");
			}
			System.out.println();
		}

	}

}
======================================================
*********
 *******
  *****
   *** 
    *
문) 역피라미드 
for(int i=num; i>=0; i--) {
	for(int k = 0; k<num-i; k++) {
		System.out.print(" ");
	}
	for(int j = 0; j<i*2-1; j++) {
		System.out.print("*");
	}
	System.out.println();
}
==========================================================
****
 ***
  **
   *
package basic;

import java.util.Scanner;

public class Ex02 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		//System.out.print("수 입력: ");
		//int n = sc.nextInt();
		for(int i = 0; i < 4; i++) {
			for(int k = 0; k < i; k++) {
				System.out.print(" ");
			}
			for(int j = 4-i; j > 0; j--) {
				System.out.print("*");
			}
		System.out.println();
		}	
	}
}
==================================================================
*****
*   *
*   *
*   *
*****
for(int i = 0; i<5; i++) {
			for(int j=0; j<5; j++) {
				if(i==0 || i==4 || j==0 || j==4) //i가0,4는 다찍기
					System.out.print("*");
				else
					System.out.print(" ");
			}	
			System.out.println();
		}
	}
====================================================================
  *  
  *  
*****
  *  
  *  
for(int i = 0; i<5; i++) {
			for(int j=0; j<5; j++) {
				if(i==2 || j==2)
					System.out.print("*");
				else
					System.out.print(" ");
			}	
			System.out.println();
		}
		
=======================================================================
*   *
 * * 
  *  
 * * 
*   *
for(int i = 0; i<5; i++) {
			for(int j=0; j<5; j++) {
				if(i==j || i+j == 4)
					System.out.print("*");
				else
					System.out.print(" ");
			}	
			System.out.println();
		}
========================================================================
*****
   * 
  *  
 *   
*****
for(int i = 0; i<5; i++) {
			for(int j=0; j<5; j++) {
				if(i==0 || i+j == 4 || i==4)
					System.out.print("*");
				else
					System.out.print(" ");
			}	
			System.out.println();
		}
========================================================================    
	*
   * *
  *****
 *     *
*       *
for(int i = 0; i<5; i++) {
			for(int j=0; j<4-i; j++) {
					System.out.print(" "); //0,1,2,3까지 공백찍고 
			}
			for(int j=0; j<=i*2; j++) { //4에 별찍고(여기서는 0)
				if (j==0 || j==i*2 || i ==2){
					System.out.print("*");
				}
				else
					System.out.print(" ");
				}
			System.out.println();
	}

============================================================================
public class 개 {
	void 먹기() {
		System.out.println("개 같이 먹는다");
	}
	void 소리내기() {
		System.out.println("개 소리 낸다");
	}
	void 움직이기() {
		System.out.println("개 같이 움직인다");
	}
	void 개만가지는기능() {
		System.out.println("개 기능");
	}
}
---------------
public class 고양이 {
	void 먹기() {
		System.out.println("고양이 같이 먹는다");
	}
	void 소리내기() {
		System.out.println("고양이 소리 낸다");
	}
	void 움직이기() {
		System.out.println("고양이 같이 움직인다");
	}
	void 개만가지는기능() {
		System.out.println("고양이 기능");
	}
}
-----------------
public class Main {
	개 dog = new 개();
	dog.움직이기();
	...
	
	고양이 cat = new 고양이();
	cat.움직이기();
	...
	
	//이렇게하면 class에서도 공통적으로 들어가는 게 많아서 비효율적 -> 추상화로 
}
====================================================================
//우리가 동물 그 자체가 먹는 소리, 움직이는거 소리내는거(공통적인부분들) 명확하게 정의 할 수가 없다. -> 상속받은 애들이 알아서구현해라 
public class Main {
	개 dog = new 개();
	dog.움직이기();
	...
	
	고양이 cat = new 고양이();
	cat.움직이기();
	...
	
	//다형성이용
	동물[] ani = new 동물[] { dog, cat};
	for(int i = 0; i<ani.length; i++) {
		ani[i].먹기();
		ani[i].소리내기();
		ani[i].움직이기();
		//개만가지는기능, 고양이만 가지는 기능은 쓸수없다.->다운캐스팅
		if(ani[i] instanceof 개) {
			개 tmp = (개)api[i];
			tmp.개만가지는기능();
		}
	}
}
----------------
public class 개 extends 동물{
	@Override
	void 먹기() {
		System.out.println("개 같이 먹는다");
	}
	@Override
	void 소리내기() {
		System.out.println("개 소리 낸다");
	}
	@Override
	void 움직이기() {
		System.out.println("개 같이 움직인다");
	}
	void 개만가지는기능() {
		System.out.println("개 기능");
	}
}
---------------
public class 고양이 extends 동물{
	@Override
	void 먹기() {
		System.out.println("고양이 같이 먹는다");
	}
	@Override
	void 소리내기() {
		System.out.println("고양이 소리 낸다");
	}
	@Override
	void 움직이기() {
		System.out.println("고양이 같이 움직인다");
	}
	void 개만가지는기능() {
		System.out.println("고양이 기능");
	}
}
------------------
public class 동물 {
	void 먹기() {}
	void 소리내기() {}
	void 움직이기() {}
}
=========================================================================
public class Main {
	개 ob1 = new 개();
	고양이 ob2 = new 고양이();
	고래 ob3 = new 고래();
	상어 ob4 = new 상어();
	펭귄 ob5 = new 펭귄();
	독수리 ob6 = new 독수리();
	
	포유류[] 포 = new 포유류[] {ob1,ob2,ob3};
	어류 어 = ob4;
	조류[] 조 = new 조류[] {ob5,ob6};
	
	//다형성이용
	동물[] ani = new 동물[] { ob1, ob2,ob3,ob4,ob5,ob6};
	//또는
	동물[] ani2 = new 동물[] {포[0], 포[1], 포[2], 어, 조[0], 조[1]};
	
	for(int i = 0; i<ani.length; i++) {
		ani[i].먹기();
		ani[i].소리내기();
		ani[i].움직이기();
		//개만가지는기능, 고양이만 가지는 기능은 쓸수없다.->다운캐스팅
		if(ani[i] instanceof 개) {
			개 tmp = (개)api[i];
			tmp.개만가지는기능();
		}
	}
}
----------------
public class 개 extends 포유류{ //동물 + 포유류의 추상메서드를 구현해야한다. 만약에 포유류에서 추상메서드가 정의되있으면 @Override안해도된다.
	@Override
	void 먹기() {
		System.out.println("개 같이 먹는다");
	}
	@Override
	void 소리내기() {
		System.out.println("개 소리 낸다");
	}
	@Override
	void 움직이기() {
		System.out.println("개 같이 움직인다");
	}
	void 개만가지는기능() {
		System.out.println("개 기능");
	}
	//이렇게 해도되고 아니면 포유류 class에서 포유류특징 메서드를 정의하면 된다.
	@Override
	void 포유류특징() {
		
	}
}
---------------
public class 고양이 extends 포유류{
	@Override
	void 먹기() {
		System.out.println("고양이 같이 먹는다");
	}
	@Override
	void 소리내기() {
		System.out.println("고양이 소리 낸다");
	}
	@Override
	void 움직이기() {
		System.out.println("고양이 같이 움직인다");
	}
	void 개만가지는기능() {
		System.out.println("고양이 기능");
	}
}
------------------
public class 고래 extends 포유류{
	@Override
	void 먹기() {
		System.out.println("고래 같이 먹는다");
	}
	@Override
	void 소리내기() {
		System.out.println("고래 소리 낸다");
	}
	@Override
	void 움직이기() {
		System.out.println("고래 같이 움직인다");
	}
	void 고래만가지는기능() {
		System.out.println("고래 기능");
	}
}
-------------------
public class 독수리 extends 조류{
	@Override
	void 먹기() {
		System.out.println("독수리 같이 먹는다");
	}
	@Override
	void 소리내기() {
		System.out.println("독수리 소리 낸다");
	}
	@Override
	void 움직이기() {
		System.out.println("독수리 같이 움직인다");
	}
	void 독수리만가지는기능() {
		System.out.println("독수리 기능");
	}
}
---------------------
public class 상어 extends 어류{
	@Override
	void 먹기() {
		System.out.println("상어 같이 먹는다");
	}
	@Override
	void 소리내기() {
		System.out.println("상어 소리 낸다");
	}
	@Override
	void 움직이기() {
		System.out.println("상어 같이 움직인다");
	}
	void 상어만가지는기능() {
		System.out.println("상어 기능");
	}
}
-------------------------
public class 펭귄 extends 조류 implements 물생활{
	@Override
	void 먹기() {
		System.out.println("펭귄 같이 먹는다");
	}
	@Override
	void 소리내기() {
		System.out.println("펭귄 소리 낸다");
	}
	@Override
	void 움직이기() {
		System.out.println("펭귄 같이 움직인다");
	}
	void 펭귄만가지는기능() {
		System.out.println("펭귄 기능");
	}
	public void 물에서동작() {
		System.out.println("펭귄이 물에서 생활");
	}
}
-----------------------------
public abstract class 조류 extends 동물{ 
	void 조류특징() {
		System.out.println("날개짓을 한다.");
	}
}
----------------------------
public abstract class 포유류 extends 동물{
	abstract void 포유류특징();
	//void 포유류특징() {  //이렇게하면 Override안해도된다.
	//	System.out.println("새끼를 낳는다");
	//}
}
------------------------------
public abstract class 어류 extends 동물{
	void 어류특징() {
		System.out.println("물에서 산다");
	}
}
//하지만 동물자체는 객체를 생성하면 안된다. 동물이라는 객체는 세상에 없다. 동물의 특성을 가지는 애들이 있을뿐이지.(개,고양이 등)
public abstract class 동물 {
	abstract void 먹기(); //동물이 어떻게 먹는지 모르기때문에 추상메서드
	abstract void 소리내기();
	abstract void 움직이기();
}
------------------
또 보니까 물생활은 따로 묶어도되겠네? -> interface로 제공 
public interface 물생활 {
	public abstract void 물에서동작();
}

그러면 main에서
//서로관련은 없지만 묶을 수 있다.
물생활[] 물 = new 물생활[] {
	ob3,ob4,ob5
};
for(int i = 0; i<물.length; i++) {
	물[i].물에서동작();
}

======================================================================================
//TV가 있고 리모콘이 있는데 서로 연관은 없는데 연결해야할때는 has ~ a 관계가 성립된다. 리모콘이 티비의 참조변수를 갖는다.(포함)
//개,고양이가 공통적인게있고 동물로 묶으니까 개는 동물이다. 고양이는 동물이다. is ~ a 관계이다.











